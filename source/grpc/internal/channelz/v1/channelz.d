// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channelz.proto

module grpc.channelz.v1.channelz_;

import google.protobuf;
import google.rpc.status;
import google.protobuf.any;
import google.protobuf.duration;
import google.protobuf.timestamp;
import google.protobuf.wrappers;

enum protocVersion = 3010000;

struct Channel
{
    @Proto(1) ChannelRef ref_ = protoDefaultValue!ChannelRef;
    @Proto(2) ChannelData data = protoDefaultValue!ChannelData;
    @Proto(3) ChannelRef[] channelRef = protoDefaultValue!(ChannelRef[]);
    @Proto(4) SubchannelRef[] subchannelRef = protoDefaultValue!(SubchannelRef[]);
    @Proto(5) SocketRef[] socketRef = protoDefaultValue!(SocketRef[]);
}

struct Subchannel
{
    @Proto(1) SubchannelRef ref_ = protoDefaultValue!SubchannelRef;
    @Proto(2) ChannelData data = protoDefaultValue!ChannelData;
    @Proto(3) ChannelRef[] channelRef = protoDefaultValue!(ChannelRef[]);
    @Proto(4) SubchannelRef[] subchannelRef = protoDefaultValue!(SubchannelRef[]);
    @Proto(5) SocketRef[] socketRef = protoDefaultValue!(SocketRef[]);
}

struct ChannelConnectivityState
{
    @Proto(1) State state = protoDefaultValue!State;

    enum State
    {
        UNKNOWN = 0,
        IDLE = 1,
        CONNECTING = 2,
        READY = 3,
        TRANSIENT_FAILURE = 4,
        SHUTDOWN = 5,
    }
}

struct ChannelData
{
    @Proto(1) ChannelConnectivityState state = protoDefaultValue!ChannelConnectivityState;
    @Proto(2) string target = protoDefaultValue!string;
    @Proto(3) ChannelTrace trace = protoDefaultValue!ChannelTrace;
    @Proto(4) long callsStarted = protoDefaultValue!long;
    @Proto(5) long callsSucceeded = protoDefaultValue!long;
    @Proto(6) long callsFailed = protoDefaultValue!long;
    @Proto(7) Timestamp lastCallStartedTimestamp = protoDefaultValue!Timestamp;
}

struct ChannelTraceEvent
{
    @Proto(1) string description = protoDefaultValue!string;
    @Proto(2) Severity severity = protoDefaultValue!Severity;
    @Proto(3) Timestamp timestamp = protoDefaultValue!Timestamp;
    enum ChildRefCase
    {
        childRefNotSet = 0,
        channelRef = 4,
        subchannelRef = 5,
    }
    ChildRefCase _childRefCase = ChildRefCase.childRefNotSet;
    @property ChildRefCase childRefCase() { return _childRefCase; }
    void clearChildRef() { _childRefCase = ChildRefCase.childRefNotSet; }
    @Oneof("_childRefCase") union
    {
        @Proto(4) ChannelRef _channelRef = protoDefaultValue!ChannelRef; mixin(oneofAccessors!_channelRef);
        @Proto(5) SubchannelRef _subchannelRef; mixin(oneofAccessors!_subchannelRef);
    }

    enum Severity
    {
        CT_UNKNOWN = 0,
        CT_INFO = 1,
        CT_WARNING = 2,
        CT_ERROR = 3,
    }
}

struct ChannelTrace
{
    @Proto(1) long numEventsLogged = protoDefaultValue!long;
    @Proto(2) Timestamp creationTimestamp = protoDefaultValue!Timestamp;
    @Proto(3) ChannelTraceEvent[] events = protoDefaultValue!(ChannelTraceEvent[]);
}

struct ChannelRef
{
    @Proto(1) long channelId = protoDefaultValue!long;
    @Proto(2) string name = protoDefaultValue!string;
}

struct SubchannelRef
{
    @Proto(7) long subchannelId = protoDefaultValue!long;
    @Proto(8) string name = protoDefaultValue!string;
}

struct SocketRef
{
    @Proto(3) long socketId = protoDefaultValue!long;
    @Proto(4) string name = protoDefaultValue!string;
}

struct ServerRef
{
    @Proto(5) long serverId = protoDefaultValue!long;
    @Proto(6) string name = protoDefaultValue!string;
}

struct Server
{
    @Proto(1) ServerRef ref_ = protoDefaultValue!ServerRef;
    @Proto(2) ServerData data = protoDefaultValue!ServerData;
    @Proto(3) SocketRef[] listenSocket = protoDefaultValue!(SocketRef[]);
}

struct ServerData
{
//    @Proto(1) ChannelTrace trace = protoDefaultValue!ChannelTrace;
    @Proto(2) long callsStarted = protoDefaultValue!long;
    @Proto(3) long callsSucceeded = protoDefaultValue!long;
    @Proto(4) long callsFailed = protoDefaultValue!long;
//    @Proto(5) Timestamp lastCallStartedTimestamp = protoDefaultValue!Timestamp;
}

struct Socket
{
    @Proto(1) SocketRef ref_ = protoDefaultValue!SocketRef;
    @Proto(2) SocketData data = protoDefaultValue!SocketData;
    @Proto(3) Address local = protoDefaultValue!Address;
    @Proto(4) Address remote = protoDefaultValue!Address;
    @Proto(5) Security security = protoDefaultValue!Security;
    @Proto(6) string remoteName = protoDefaultValue!string;
}

struct SocketData
{
    @Proto(1) long streamsStarted = protoDefaultValue!long;
    @Proto(2) long streamsSucceeded = protoDefaultValue!long;
    @Proto(3) long streamsFailed = protoDefaultValue!long;
    @Proto(4) long messagesSent = protoDefaultValue!long;
    @Proto(5) long messagesReceived = protoDefaultValue!long;
    @Proto(6) long keepAlivesSent = protoDefaultValue!long;
    @Proto(7) Timestamp lastLocalStreamCreatedTimestamp = protoDefaultValue!Timestamp;
    @Proto(8) Timestamp lastRemoteStreamCreatedTimestamp = protoDefaultValue!Timestamp;
    @Proto(9) Timestamp lastMessageSentTimestamp = protoDefaultValue!Timestamp;
    @Proto(10) Timestamp lastMessageReceivedTimestamp = protoDefaultValue!Timestamp;
    @Proto(11) Int64Value localFlowControlWindow = protoDefaultValue!Int64Value;
    @Proto(12) Int64Value remoteFlowControlWindow = protoDefaultValue!Int64Value;
    @Proto(13) SocketOption[] option = protoDefaultValue!(SocketOption[]);
}

struct Address
{
    enum AddressCase
    {
        addressNotSet = 0,
        tcpipAddress = 1,
        udsAddress = 2,
        otherAddress = 3,
    }
    AddressCase _addressCase = AddressCase.addressNotSet;
    @property AddressCase addressCase() { return _addressCase; }
    void clearAddress() { _addressCase = AddressCase.addressNotSet; }
    @Oneof("_addressCase") union
    {
        @Proto(1) TcpIpAddress _tcpipAddress = protoDefaultValue!TcpIpAddress; mixin(oneofAccessors!_tcpipAddress);
        @Proto(2) UdsAddress _udsAddress; mixin(oneofAccessors!_udsAddress);
        @Proto(3) OtherAddress _otherAddress; mixin(oneofAccessors!_otherAddress);
    }

    static struct TcpIpAddress
    {
        @Proto(1) bytes ipAddress = protoDefaultValue!bytes;
        @Proto(2) int port = protoDefaultValue!int;
    }

    static struct UdsAddress
    {
        @Proto(1) string filename = protoDefaultValue!string;
    }

    static struct OtherAddress
    {
        @Proto(1) string name = protoDefaultValue!string;
        @Proto(2) Any value = protoDefaultValue!Any;
    }
}

struct Security
{
    enum ModelCase
    {
        modelNotSet = 0,
        tls = 1,
        other = 2,
    }
    ModelCase _modelCase = ModelCase.modelNotSet;
    @property ModelCase modelCase() { return _modelCase; }
    void clearModel() { _modelCase = ModelCase.modelNotSet; }
    @Oneof("_modelCase") union
    {
        @Proto(1) Tls _tls = protoDefaultValue!Tls; mixin(oneofAccessors!_tls);
        @Proto(2) OtherSecurity _other; mixin(oneofAccessors!_other);
    }

    static struct Tls
    {
        enum CipherSuiteCase
        {
            cipherSuiteNotSet = 0,
            standardName = 1,
            otherName = 2,
        }
        CipherSuiteCase _cipherSuiteCase = CipherSuiteCase.cipherSuiteNotSet;
        @property CipherSuiteCase cipherSuiteCase() { return _cipherSuiteCase; }
        void clearCipherSuite() { _cipherSuiteCase = CipherSuiteCase.cipherSuiteNotSet; }
        @Oneof("_cipherSuiteCase") union
        {
            @Proto(1) string _standardName = protoDefaultValue!string; mixin(oneofAccessors!_standardName);
            @Proto(2) string _otherName; mixin(oneofAccessors!_otherName);
        }
        @Proto(3) bytes localCertificate = protoDefaultValue!bytes;
        @Proto(4) bytes remoteCertificate = protoDefaultValue!bytes;
    }

    static struct OtherSecurity
    {
        @Proto(1) string name = protoDefaultValue!string;
        @Proto(2) Any value = protoDefaultValue!Any;
    }
}

struct SocketOption
{
    @Proto(1) string name = protoDefaultValue!string;
    @Proto(2) string value = protoDefaultValue!string;
    @Proto(3) Any additional = protoDefaultValue!Any;
}

struct SocketOptionTimeout
{
    @Proto(1) Duration duration = protoDefaultValue!Duration;
}

struct SocketOptionLinger
{
    @Proto(1) bool active = protoDefaultValue!bool;
    @Proto(2) Duration duration = protoDefaultValue!Duration;
}

struct SocketOptionTcpInfo
{
    @Proto(1) uint tcpiState = protoDefaultValue!uint;
    @Proto(2) uint tcpiCaState = protoDefaultValue!uint;
    @Proto(3) uint tcpiRetransmits = protoDefaultValue!uint;
    @Proto(4) uint tcpiProbes = protoDefaultValue!uint;
    @Proto(5) uint tcpiBackoff = protoDefaultValue!uint;
    @Proto(6) uint tcpiOptions = protoDefaultValue!uint;
    @Proto(7) uint tcpiSndWscale = protoDefaultValue!uint;
    @Proto(8) uint tcpiRcvWscale = protoDefaultValue!uint;
    @Proto(9) uint tcpiRto = protoDefaultValue!uint;
    @Proto(10) uint tcpiAto = protoDefaultValue!uint;
    @Proto(11) uint tcpiSndMss = protoDefaultValue!uint;
    @Proto(12) uint tcpiRcvMss = protoDefaultValue!uint;
    @Proto(13) uint tcpiUnacked = protoDefaultValue!uint;
    @Proto(14) uint tcpiSacked = protoDefaultValue!uint;
    @Proto(15) uint tcpiLost = protoDefaultValue!uint;
    @Proto(16) uint tcpiRetrans = protoDefaultValue!uint;
    @Proto(17) uint tcpiFackets = protoDefaultValue!uint;
    @Proto(18) uint tcpiLastDataSent = protoDefaultValue!uint;
    @Proto(19) uint tcpiLastAckSent = protoDefaultValue!uint;
    @Proto(20) uint tcpiLastDataRecv = protoDefaultValue!uint;
    @Proto(21) uint tcpiLastAckRecv = protoDefaultValue!uint;
    @Proto(22) uint tcpiPmtu = protoDefaultValue!uint;
    @Proto(23) uint tcpiRcvSsthresh = protoDefaultValue!uint;
    @Proto(24) uint tcpiRtt = protoDefaultValue!uint;
    @Proto(25) uint tcpiRttvar = protoDefaultValue!uint;
    @Proto(26) uint tcpiSndSsthresh = protoDefaultValue!uint;
    @Proto(27) uint tcpiSndCwnd = protoDefaultValue!uint;
    @Proto(28) uint tcpiAdvmss = protoDefaultValue!uint;
    @Proto(29) uint tcpiReordering = protoDefaultValue!uint;
}

struct GetTopChannelsRequest
{
    @Proto(1) long startChannelId = protoDefaultValue!long;
    @Proto(2) long maxResults = protoDefaultValue!long;
}

struct GetTopChannelsResponse
{
    @Proto(1) Channel[] channel = protoDefaultValue!(Channel[]);
    @Proto(2) bool end = protoDefaultValue!bool;
}

struct GetServersRequest
{
    @Proto(1) long startServerId = protoDefaultValue!long;
    @Proto(2) long maxResults = protoDefaultValue!long;
}

struct GetServersResponse
{
    @Proto(1) Server[] server = protoDefaultValue!(Server[]);
    @Proto(2) bool end = protoDefaultValue!bool;
}

struct GetServerRequest
{
    @Proto(1) long serverId = protoDefaultValue!long;
}

struct GetServerResponse
{
    @Proto(1) Server server = protoDefaultValue!Server;
}

struct GetServerSocketsRequest
{
    @Proto(1) long serverId = protoDefaultValue!long;
    @Proto(2) long startSocketId = protoDefaultValue!long;
    @Proto(3) long maxResults = protoDefaultValue!long;
}

struct GetServerSocketsResponse
{
    @Proto(1) SocketRef[] socketRef = protoDefaultValue!(SocketRef[]);
    @Proto(2) bool end = protoDefaultValue!bool;
}

struct GetChannelRequest
{
    @Proto(1) long channelId = protoDefaultValue!long;
}

struct GetChannelResponse
{
    @Proto(1) Channel channel = protoDefaultValue!Channel;
}

struct GetSubchannelRequest
{
    @Proto(1) long subchannelId = protoDefaultValue!long;
}

struct GetSubchannelResponse
{
    @Proto(1) Subchannel subchannel = protoDefaultValue!Subchannel;
}

struct GetSocketRequest
{
    @Proto(1) long socketId = protoDefaultValue!long;
    @Proto(2) bool summary = protoDefaultValue!bool;
}

struct GetSocketResponse
{
    @Proto(1) Socket socket = protoDefaultValue!Socket;
}

interface Channelz
{
    @RPC("/grpc.channelz.v1.Channelz/GetTopChannels")
    Status GetTopChannels(GetTopChannelsRequest, ref GetTopChannelsResponse);

    @RPC("/grpc.channelz.v1.Channelz/GetServers")
    Status GetServers(GetServersRequest, ref GetServersResponse);

    @RPC("/grpc.channelz.v1.Channelz/GetServer")
    Status GetServer(GetServerRequest, ref GetServerResponse);

    @RPC("/grpc.channelz.v1.Channelz/GetServerSockets")
    Status GetServerSockets(GetServerSocketsRequest, ref GetServerSocketsResponse);

    @RPC("/grpc.channelz.v1.Channelz/GetChannel")
    Status GetChannel(GetChannelRequest, ref GetChannelResponse);

    @RPC("/grpc.channelz.v1.Channelz/GetSubchannel")
    Status GetSubchannel(GetSubchannelRequest, ref GetSubchannelResponse);

    @RPC("/grpc.channelz.v1.Channelz/GetSocket")
    Status GetSocket(GetSocketRequest, ref GetSocketResponse);

}
